package ckb_sdk_go

import (
	"ckb-sdk-go/bincode"
	"ckb-sdk-go/core"
	"encoding/hex"
	"github.com/decred/dcrd/dcrec/secp256k1"
	"reflect"
	"strings"
	"testing"
)

func Test_UnMarshal(t *testing.T) {
	rawTxStr := "170000000000000000000000010000000000000001420000000000000030783030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000007B0000000000000001000000000000000088526A740000000300000000000000010203000000000000000042000000000000003078303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000"
	rawTxBytes, _ := hex.DecodeString(rawTxStr)
	tRawTx := reflect.TypeOf(core.RawTransaction{})
	dddd, err := bincode.UnMarshal(rawTxBytes, tRawTx)
	if err != nil {
		t.Error(err)
	}
	rawTx := dddd.(core.RawTransaction)
	if rawTx.Inputs[0].Since != 123 {
		t.Errorf("expect since %d but got %d", 123, rawTx.Inputs[0].Since)
	}

	marshalBytes, err := bincode.Marshal(dddd)
	if err != nil {
		t.Error(err)
	}
	marshalStr := hex.EncodeToString(marshalBytes)
	if marshalStr != strings.ToLower(rawTxStr) {
		t.Errorf("expect equal but got %s", marshalStr)
	}
}
func Test_TxHash(t *testing.T) {
	builder := new(TransactionBuilder).
		SetVersion(23).
		AppendOutput(core.CellOutput{
			Capacity: 500000000000, //5000 * 00000000
			Data:     []byte{1, 2, 3},
			Lock:     core.Script{},
			Type_:    nil,
		}).
		AppendInput(core.CellInput{
			Previous_output: core.OutPoint{
				Block_hash: nil,
				Cell: &core.CellOutPoint{
					Tx_hash: core.ZeroH256,
					Index:   0,
				},
			},
			Since: 123,
		}).
		AppendWitness([][]byte{[]byte{7, 8, 9}})
		// byte   170000000000000000000000010000000000000001420000000000000030783030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000007B0000000000000001000000000000000088526A740000000300000000000000010203000000000000000042000000000000003078303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000
		// hash 33b4e5e7dfd28956f09dadb18073d979f23aabe397b79cfb7e8db580cc4917b3

		//witness 170000000000000000000000010000000000000001420000000000000030783030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000007B0000000000000001000000000000000088526A740000000300000000000000010203000000000000000042000000000000003078303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000010000000000000001000000000000000300000000000000070809
		//witness_hash afa16324fed1fa3b9efa3e11fa0588a01ca8a33342e8844f729b5905697cb350
	expected := "33b4e5e7dfd28956f09dadb18073d979f23aabe397b79cfb7e8db580cc4917b3"
	tx := builder.Build()
	hash := tx.TxHash()
	hashStr := hex.EncodeToString(hash[:])
	if hashStr != expected {
		t.Errorf("expect %s but got %s", expected, hashStr)
	}

	expectedWitnessHash := "afa16324fed1fa3b9efa3e11fa0588a01ca8a33342e8844f729b5905697cb350"
	witnesshash := tx.WitnessHash()
	witnesshashStr := hex.EncodeToString(witnesshash[:])
	if witnesshashStr != expectedWitnessHash {
		t.Errorf("expect witness %s but got %s", expectedWitnessHash, witnesshashStr)
	}
	priv, _ := secp256k1.GeneratePrivateKey()
	SignTx(builder, priv)
}
